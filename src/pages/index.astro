---
import Layout from "../layouts/Layout.astro";
import Card from "../components/Card.astro";
---

<Layout title="Welcome to Astro.">
  <canvas></canvas>

  <script>
    const canvas = document.querySelector("canvas");
    const ctx = canvas.getContext("2d");

    canvas.width = 800;
    canvas.height = 700;

    const gravity = 0.5;
    let isMouseDown = false;
    let pressStartTime = 0;
    let selectedShape = null;

    function GenerateFiguresRandom() {
      const types = ["square", "circle", "triangle"];
      const type = types[Math.floor(Math.random() * types.length)];
      const x = Math.random() * (canvas.width - 100) + 50;
      const y = -50;
      const size = Math.random() * 30 + 30;
      const color = `hsl(${Math.random() * 360}, 100%, 50%)`;
      return { type, x, y, size, velocity: 0, color };
    }

    let shapes = Array.from({ length: 10 }, () => GenerateFiguresRandom());

    function drawShapes() {
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      shapes.forEach((shape) => {
        ctx.fillStyle = shape.color;
        switch (shape.type) {
          case "square":
            ctx.fillRect(
              shape.x - shape.size / 2,
              shape.y - shape.size / 2,
              shape.size,
              shape.size
            );
            break;
          case "circle":
            ctx.beginPath();
            ctx.arc(shape.x, shape.y, shape.size / 2, 0, Math.PI * 2);
            ctx.fill();
            ctx.closePath();
            break;
          case "triangle":
            ctx.beginPath();
            ctx.moveTo(shape.x, shape.y - shape.size / 2);
            ctx.lineTo(shape.x - shape.size / 2, shape.y + shape.size / 2);
            ctx.lineTo(shape.x + shape.size / 2, shape.y + shape.size / 2);
            ctx.closePath();
            ctx.fill();
            break;
        }
      });
    }

    function updateShapes() {
      shapes.forEach((shape) => {
        if (shape === selectedShape && isMouseDown) {
          let pressDuration = (Date.now() - pressStartTime) / 1000;
          shape.velocity = -Math.min(10, pressDuration * 5); 
        }

        shape.y += shape.velocity; 
        shape.velocity += gravity;

        
        if (shape.y + shape.size / 2 > canvas.height) {
          shape.y = canvas.height - shape.size / 2;
          shape.velocity = 0;
        }
      });

      drawShapes();
      requestAnimationFrame(updateShapes);
    }


    function DetectFigure(x, y) {
      return shapes.find((shape) => {
        switch (shape.type) {
          case "square":
            return (
              x > shape.x - shape.size / 2 &&
              x < shape.x + shape.size / 2 &&
              y > shape.y - shape.size / 2 &&
              y < shape.y + shape.size / 2
            );
          case "circle":
            const dist = Math.hypot(x - shape.x, y - shape.y);
            return dist <= shape.size / 2;
          case "triangle":
            
            return (
              x > shape.x - shape.size / 2 &&
              x < shape.x + shape.size / 2 &&
              y > shape.y - shape.size / 2 &&
              y < shape.y + shape.size / 2
            );
        }
      });
    }

    // Eventos del mouse
    canvas.addEventListener("mousedown", (e) => {
      const mousePos = { x: e.offsetX, y: e.offsetY };
      selectedShape = DetectFigure(mousePos.x, mousePos.y);

      if (selectedShape) {
        isMouseDown = true;
        pressStartTime = Date.now();
      }
    });

    canvas.addEventListener("mouseup", () => {
      isMouseDown = false;
    });

    // Iniciar la animaci√≥n
    drawShapes();
    updateShapes();
  </script>
</Layout>

<style>
  main {
    margin: auto;
    padding: 1rem;
    width: 800px;
    max-width: calc(100% - 2rem);
    color: white;
    font-size: 20px;
    line-height: 1.6;
  }
  .astro-a {
    position: absolute;
    top: -32px;
    left: 50%;
    transform: translatex(-50%);
    width: 220px;
    height: auto;
    z-index: -1;
  }
  h1 {
    font-size: 4rem;
    font-weight: 700;
    line-height: 1;
    text-align: center;
    margin-bottom: 1em;
  }
  .text-gradient {
    background-image: var(--accent-gradient);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-size: 400%;
    background-position: 0%;
  }
  .instructions {
    margin-bottom: 2rem;
    border: 1px solid rgba(var(--accent-light), 25%);
    background: linear-gradient(
      rgba(var(--accent-dark), 66%),
      rgba(var(--accent-dark), 33%)
    );
    padding: 1.5rem;
    border-radius: 8px;
  }
  .instructions code {
    font-size: 0.8em;
    font-weight: bold;
    background: rgba(var(--accent-light), 12%);
    color: rgb(var(--accent-light));
    border-radius: 4px;
    padding: 0.3em 0.4em;
  }
  .instructions strong {
    color: rgb(var(--accent-light));
  }
  .link-card-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(24ch, 1fr));
    gap: 2rem;
    padding: 0;
  }
</style>
